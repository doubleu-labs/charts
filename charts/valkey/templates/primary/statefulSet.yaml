{{- if or
  (eq .Values.architecture "standalone")
  (eq .Values.architecture "replica")
-}}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "valkey.objectName" (list . "primary") }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/component: primary
    {{- include "valkey.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: primary
      {{- include "valkey.selectorLabels" . | nindent 6 }}
  serviceName: {{ include "valkey.objectName" (list . "headless") }}
  updateStrategy:
    {{- toYaml .Values.updateStrategy.primary | nindent 4 }}
  template:
    metadata:
      labels:
        app.kubernetes.io/component: primary
        access-mode-read: "true"
        access-mode-read-write: "true"
        {{- include "valkey.selectorLabels" . | nindent 8 }}
      annotations:
        checksum/conf: {{ include (print .Template.BasePath "/primary/configMap.yaml") . | sha256sum }}
        {{- if .Values.auth.enabled }}
        checksum/aclAuth: {{ include (print .Template.BasePath "/configMap_acl-auth.yaml") . | sha256sum }}
        {{- end }}
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
        runAsGroup: 1000
        runAsNonRoot: true
      serviceAccountName: {{ include "valkey.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.serviceAccount.automountToken }}
      {{- if .Values.image.pullSecrets }}
      {{- include "valkey.imagePullSecrets" . | nindent 6 }}
      {{- end }}
      containers:
        - name: valkey
          image: {{ include "valkey.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /usr/sbin/valkey-server
          args:
            - /etc/valkey/valkey.conf
          ports:
            - name: valkey
              containerPort: 6379
          volumeMounts:
            - mountPath: /etc/valkey
              name: config
            - mountPath: /data
              name: data
            {{- if or
              .Values.tls.certManager.enabled
              (and .Values.tls.certManager.enabled .Values.tls.certManager.csiDriver)
              .Values.tls.existingSecret.primary
            }}
            - mountPath: /run/secrets/valkey/tls
              name: tls
            {{- end }}
          resources:
            limits:
              cpu: {{ .Values.resources.primary.limits.cpu }}
              memory: {{ .Values.resources.primary.limits.memory }}
              ephemeral-storage: {{ .Values.resources.primary.limits.ephemeralStorage }}
            requests:
              cpu: {{ .Values.resources.primary.requests.cpu }}
              memory: {{ .Values.resources.primary.requests.memory }}
              ephemeral-storage: {{ .Values.resources.primary.requests.ephemeralStorage }}
      volumes:
        - name: config
          projected:
            sources:
              - configMap:
                  name: {{ include "valkey.objectName" (list . "primary") }}
              {{- if .Values.auth.enabled }}
              - configMap:
                  name: {{ include "valkey.objectName" (list . "acl-auth") }}
              {{- end }}
        {{- if or
          .Values.tls.certManager.enabled
          (and .Values.tls.certManager.enabled .Values.tls.certManager.csiDriver)
          .Values.tls.existingSecret.primary
        }}
        - name: tls
          {{- if .Values.tls.certManager.csiDriver }}
          csi:
            driver: csi.cert-manager.io
            readOnly: true
            volumeAttributes:
              csi.cert-manager.io/common-name: {{ include "valkey.objectName" (list . "primary") }}
              csi.cert-manager.io/dns-names: {{ include "valkey.primary.dnsNames" . | fromJsonArray | join "," }}
              csi.cert-manager.io/fs-group: "1000"
              csi.cert-manager.io/issuer-kind: {{ .Values.tls.certManager.issuer.kind }}
              csi.cert-manager.io/issuer-name: {{ required "CertManager Issuer Name is required" .Values.tls.certManager.issuer.name }}
              csi.cert-manager.io/key-usages: client auth,server auth
          {{- else }}
          secret:
            secretName: {{ coalesce .Values.tls.existingSecret.primary (include "valkey.objectName" (list . "primary-server-certificate")) }}
          {{- end }}
        {{- end }}
        {{- if not .Values.persistence.primary.enabled }}
        - name: data
          emptyDir: {}
        {{- end }}
  {{- if .Values.persistence.primary.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        {{- if .Values.persistence.primary.storageClass }}
        storageClassName: {{ .Values.persistence.primary.storageClass }}
        {{- end }}
        accessModes:
          {{- toYaml .Values.persistence.primary.modes | nindent 10 }}
        resources:
          requests:
            storage: {{ .Values.persistence.primary.size }}
  {{- end }}
{{- end -}}